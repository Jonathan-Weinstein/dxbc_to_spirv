/*
RWStructuredBuffer<float> uav : register(u0);
[numthreads(64, 1, 1)] // number of threads per group, gl_WorkGroupSize.
void main(uint3 globalID : SV_DispatchThreadID)
{
	uint compIndex = globalID.x;
    float a = uav[compIndex];
	a = a * 2.0f + 1.0f;
    uav[compIndex] = a;
}
*/
static const char DxbcText[] = R"(
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_uav_structured u0, 4
dcl_input vThreadID.x
dcl_temps 1
dcl_thread_group 64, 1, 1
ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r0.x, vThreadID.x, l(0), u0.xxxx
mad r0.x, r0.x, l(2.000000), l(1.000000)
store_structured u0.x, vThreadID.x, l(0), r0.x
ret
// Approximately 4 instruction slots used
)";


// This is what dxc does with the same hlsl source,
// glslc's output of similar glsl source follows it, and looks a tiny bit better.
/*
C:\VulkanSDK\1.2.148.1\Bin\dxc.exe -spirv simple_compute_structbuf.hlsl -T cs_5_0 -E main -O3
; SPIR-V
; Version: 1.0
; Generator: Google spiregg; 0
; Bound: 25
; Schema: 0
               OpCapability Shader
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %main "main" %gl_GlobalInvocationID
               OpExecutionMode %main LocalSize 64 1 1
               OpSource HLSL 600
               OpName %type_RWStructuredBuffer_float "type.RWStructuredBuffer.float"
               OpName %uav "uav"
               OpName %main "main"
               OpDecorate %gl_GlobalInvocationID BuiltIn GlobalInvocationId
               OpDecorate %uav DescriptorSet 0
               OpDecorate %uav Binding 0
               OpDecorate %_runtimearr_float ArrayStride 4
               OpMemberDecorate %type_RWStructuredBuffer_float 0 Offset 0
               OpDecorate %type_RWStructuredBuffer_float BufferBlock
        %int = OpTypeInt 32 1
      %int_0 = OpConstant %int 0
      %float = OpTypeFloat 32
    %float_2 = OpConstant %float 2
    %float_1 = OpConstant %float 1
%_runtimearr_float = OpTypeRuntimeArray %float
%type_RWStructuredBuffer_float = OpTypeStruct %_runtimearr_float
%_ptr_Uniform_type_RWStructuredBuffer_float = OpTypePointer Uniform %type_RWStructuredBuffer_float
       %uint = OpTypeInt 32 0
     %v3uint = OpTypeVector %uint 3
%_ptr_Input_v3uint = OpTypePointer Input %v3uint
       %void = OpTypeVoid
         %16 = OpTypeFunction %void
%_ptr_Uniform_float = OpTypePointer Uniform %float
        %uav = OpVariable %_ptr_Uniform_type_RWStructuredBuffer_float Uniform
%gl_GlobalInvocationID = OpVariable %_ptr_Input_v3uint Input
       %main = OpFunction %void None %16
         %18 = OpLabel
         %19 = OpLoad %v3uint %gl_GlobalInvocationID
         %20 = OpCompositeExtract %uint %19 0
         %21 = OpAccessChain %_ptr_Uniform_float %uav %int_0 %20
         %22 = OpLoad %float %21
         %23 = OpFMul %float %22 %float_2
         %24 = OpFAdd %float %23 %float_1
               OpStore %21 %24
               OpReturn
               OpFunctionEnd
*/

// glslc on ported glsl:
/*
#version 460 core

layout(set = 0, binding = 0, std430) buffer storage_buffer0_t {
	float a[];
} storage_buffer0;

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint compIndex = gl_GlobalInvocationID.x;
    float a = storage_buffer0.a[compIndex];
	a = a * 2.0f + 1.0f;
    storage_buffer0.a[compIndex] = a;
}


%VULKAN_SDK%\1.2.148.1\Bin\glslc.exe simple_compute_vk.comp -S -o - -O
; SPIR-V
; Version: 1.0
; Generator: Google Shaderc over Glslang; 10
; Bound: 40
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %4 "main" %gl_GlobalInvocationID
               OpExecutionMode %4 LocalSize 64 1 1
               OpDecorate %gl_GlobalInvocationID BuiltIn GlobalInvocationId
               OpDecorate %_runtimearr_float ArrayStride 4
               OpMemberDecorate %_struct_20 0 Offset 0
               OpDecorate %_struct_20 BufferBlock
               OpDecorate %22 DescriptorSet 0
               OpDecorate %22 Binding 0
               OpDecorate %gl_WorkGroupSize BuiltIn WorkgroupSize
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
       %uint = OpTypeInt 32 0
     %v3uint = OpTypeVector %uint 3
%_ptr_Input_v3uint = OpTypePointer Input %v3uint
%gl_GlobalInvocationID = OpVariable %_ptr_Input_v3uint Input
     %uint_0 = OpConstant %uint 0
%_ptr_Input_uint = OpTypePointer Input %uint
      %float = OpTypeFloat 32
%_runtimearr_float = OpTypeRuntimeArray %float
 %_struct_20 = OpTypeStruct %_runtimearr_float
%_ptr_Uniform__struct_20 = OpTypePointer Uniform %_struct_20
         %22 = OpVariable %_ptr_Uniform__struct_20 Uniform
        %int = OpTypeInt 32 1
      %int_0 = OpConstant %int 0
%_ptr_Uniform_float = OpTypePointer Uniform %float
    %float_2 = OpConstant %float 2
    %float_1 = OpConstant %float 1
    %uint_64 = OpConstant %uint 64
     %uint_1 = OpConstant %uint 1
%gl_WorkGroupSize = OpConstantComposite %v3uint %uint_64 %uint_1 %uint_1
          %4 = OpFunction %void None %3
          %5 = OpLabel
         %14 = OpAccessChain %_ptr_Input_uint %gl_GlobalInvocationID %uint_0
         %15 = OpLoad %uint %14
         %27 = OpAccessChain %_ptr_Uniform_float %22 %int_0 %15
         %28 = OpLoad %float %27
         %31 = OpFMul %float %28 %float_2
         %33 = OpFAdd %float %31 %float_1
               OpStore %27 %33
               OpReturn
               OpFunctionEnd
*/



#include <stdio.h>

int main()
{
    puts("Howdy!");
    return 0;
}
